<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>과제로 하는 과일 분류 웹페이지<!DOCTYPE html></title>
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <h1>이건 사과? 아님 오렌지?</h1>
    <p>삥뺭뽕뺭삥뺭뽕삥</p>

    <div>Teachable Machine Image Model</div>
<button type="button" onclick="init()">Start</button>
<div id="webcam-container"></div>
<div id="label-container"></div>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
<script type="text/javascript">
    // More API functions here:
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

    // the link to your model provided by Teachable Machine export panel
    const URL = "./my_model/";

    let model, webcam, labelContainer, maxPredictions;

    // Load the image model and setup the webcam
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
        }
    }

    async function loop() {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }

    // run the webcam image through the image model
        // run the webcam image through the image model
        async function predict() {
            // predict can take in an image, video or canvas html element
            var image = document.getElementById("my-image")
            const prediction = await model.predict(image, false);
            if(prediction[0].probability > 0.7){
                labelContainer.childNodes[0].innerHTML = "위 과일은 사과입니다."
                labelContainer.childNodes[1].innerHTML = "사과는 사과나무의 열매로, 세계적으로 널리 재배되는 열매 가운데 하나이다. 평과, 빈파라고도 한다. 사과열매는 가을에 익는데, 보통 지름이 5~9센티미터이다. 극히 드물지만 15센티에 이르기도 한다. 씨앗에는 미량의 사이안화물이 함유되어 있다."
            }
            else if(prediction[1].probability > 0.7){
                labelContainer.childNodes[0].innerHTML = "위 포켓몬은 오렌지입니다."
                labelContainer.childNodes[1].innerHTML = "오렌지는 비타민 C가 매우 풍부한 과일의 하나로, 일반적으로 당귤나무의 열매인 당귤을 부르는 말이다. 대표적인 귤열매로, 기름기를 함유한 가죽질 껍질과 즙이 많은 과육으로 이루어져 있다."
        
            else{
                labelContainer.childNodes[0].innerHTML = "모르겠습니다."
            }
        }
    }
</script>
